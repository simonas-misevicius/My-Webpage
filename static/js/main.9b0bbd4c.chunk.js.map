{"version":3,"sources":["Home.js","ImageWebServiceInput.js","ImageWebService.js","SDBEdit.js","SDBList.js","SDBRow.js","SDBRowLower.js","SDBListLowers.js","SDBAdd.js","SDBAddLower.js","SDBRowUpper.js","SDBListUpper.js","SDBEditUpper.js","SDBEditLower.js","ServerlessDB.js","SDBHome.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Container","Row","className","WSInput","path","request","name","useState","num","changeNum","value","onChange","event","target","type","onClick","ImageWS","imageData","setImageData","promiseInProgress","usePromiseTracker","axios","require","amount","func","str","toString","trackPromise","get","then","response","data","imageBytes","catch","error","console","log","useEffect","imageSrc","src","alt","SDBEdit","ReturnToList","rowInfo","refetch","Edit","uppers","handlesuccess","SDBList","List","showEdit","id","upperName","upperId","setRowInfo","SwitchBetweenListAndEdit","EditRow","SDBRow","rowData","mutationString","MyRow","checkData","DELETE","gql","useMutation","mutateFunction","loading","Col","variables","SDBRowLower","namel","SDBListLowers","callEditRow","removeLower","success","map","item","i","lowers","lowerItem","loi","INSERT_UPPER","SDBAdd","changename","onSubmit","e","preventDefault","INSERT_LOWER","SDBAddLower","selectionOptions","selectionId","setSelectionId","newName","alert","useAlert","label","keyId","defaultValue","options","SDBRowUpper","SDBListUpper","removeUpper","show","EDIT_UPPER","SDBEditUpper","EDIT_LOWER","SDBEditLower","GET_UPPERS","ServerlessDB","useQuery","fetchPolicy","notifyOnNetworkStatusChange","networkStatus","NetworkStatus","SDBHome","App","Nav","variant","Item","Link","eventKey","as","to","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","position","positions","BOTTOM_CENTER","timeout","offset","transition","transitions","SCALE","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","template","AlertTemplate","document","getElementById"],"mappings":"sNAGe,SAASA,IACtB,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,oBAAIC,UAAU,cAAd,kEAIF,uBACA,cAACD,EAAA,EAAD,UACE,oBAAIC,UAAU,eAAd,mFAIF,uBACA,qGAGA,qJAIA,uBACA,8GAIA,oVAOA,uBACA,yFACA,uHAIA,0B,WCzCS,SAASC,EAAT,GAA0C,EAAvBC,KAAwB,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAC/C,EAAyBC,mBAAS,GAAlC,mBAAOC,EAAP,KAAYC,EAAZ,KAMA,OACE,qCACE,uBACEC,MAAOF,EACPG,SAAU,SAACC,GACTH,EAAUG,EAAMC,OAAOH,QAEzBI,KAAK,WAEP,wBAAQC,QAdQ,WACP,IAAPP,GAA2B,iBAAPA,GACtBH,EAAQG,EAAKF,IAYb,SAA+BA,O,oBCZtB,SAASU,IACtB,MAAkCT,qBAAlC,mBAAOU,EAAP,KAAkBC,EAAlB,KACQC,EAAsBC,8BAAtBD,kBACFE,EAAQC,EAAQ,KAChBjB,EAAU,SAACkB,EAAQC,GACvB,IAAIC,EAAM,sDACI,MAAVF,EACFE,GAAYD,EAEZC,EAAMA,EAAMD,EAAO,IAAMD,EAAOG,WAElCC,uBACEN,EACGO,IAAIH,GACJI,MAAK,SAAUC,GAEdZ,EAAaY,EAASC,KAAKC,eAE5BC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,QAIpBG,qBAAU,WACRhC,EAAQ,KAAM,WACb,IACH,IAAMiC,EAAW,yBAA2BrB,EAC5C,OACE,eAACjB,EAAA,EAAD,WACE,oBAAIE,UAAU,cAAd,2FAIc,MAAbe,EAAoB,KAAO,qBAAKsB,IAAKD,EAAUE,IAAI,aAC7B,IAAtBrB,EAA6B,cAAC,aAAD,IAAiB,KAC/C,uBACA,cAAChB,EAAD,CAASE,QAASA,EAASC,KAAK,eAChC,uBACA,cAACH,EAAD,CAASE,QAASA,EAASC,KAAK,QAChC,uBACA,wBAAQS,QAAS,kBAAMV,EAAQ,KAAM,UAArC,sB,8CC9CS,SAASoC,EAAT,GAMX,IALFC,EAKC,EALDA,aACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,QACAC,EAEC,EAFDA,KACAC,EACC,EADDA,OASA,OACE,qCACE,cAACD,EAAD,CAAMF,QAASA,EAASI,cANN,WACpBH,IACAF,EAAa,EAAG,KAAM,OAIkCI,OAAQA,IAC9D,wBAAQ/B,QAVO,WACjB2B,EAAa,EAAG,KAAM,OASpB,uBCdS,SAASM,EAAT,GAAiD,IAA9BjB,EAA6B,EAA7BA,KAAMkB,EAAuB,EAAvBA,KAAML,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KACrD,EAA8BtC,mBAAS,CACrC2C,SAAU,EACV5C,KAAM,KACN6C,GAAI,KACJC,UAAW,KACXC,QAAS,OALX,mBAAOV,EAAP,KAAgBW,EAAhB,KAOMC,EAA2B,SAC/BL,EACA5C,EACA6C,GAGI,IAFJC,EAEG,uDAFS,KACZC,EACG,uDADO,KAEVC,EAAW,CACTJ,SAAUA,EACV5C,KAAMA,EACN6C,GAAIA,EACJC,UAAWA,EACXC,QAASA,KAGb,OAAwB,GAApBV,EAAQO,SAER,cAACT,EAAD,CACEC,aAAca,EACdZ,QAASA,EACTC,QAASA,EACTC,KAAMA,EACNC,OAAQf,EAAKe,SAKjB,cAACG,EAAD,CAAMlB,KAAMA,EAAMyB,QAASD,EAA0BX,QAASA,I,aClCnD,SAASa,EAAT,GAQX,IAPFC,EAOC,EAPDA,QACAC,EAMC,EANDA,eACAC,EAKC,EALDA,MACAR,EAIC,EAJDA,UACAC,EAGC,EAHDA,QACAG,EAEC,EAFDA,QACAK,EACC,EADDA,UAEMC,EAASC,YAAIJ,GACnB,EAAmDK,YAAYF,GAA/D,mBAAOG,EAAP,YAAyBlC,EAAzB,EAAyBA,KAAzB,EAA+BmC,QAA/B,EAAwChC,MAaxC,OALAG,qBAAU,WACJN,GACF8B,EAAU9B,MAIZ,8BACE,eAAC9B,EAAA,EAAD,WACE,cAACkE,EAAA,EAAD,UACE,cAACP,EAAD,CAAOF,QAASA,EAASN,UAAWA,MAEtC,cAACe,EAAA,EAAD,UACE,wBAAQpD,QAlBG,WACjBkD,EAAe,CAAEG,UAAW,CAAEjB,GAAIO,EAAQP,OAiBpC,2BAEF,cAACgB,EAAA,EAAD,UACE,wBAAQpD,QAlBI,WAClByC,EAAQE,EAASN,EAAWC,IAiBtB,8BCnCK,SAASgB,EAAT,GAA8C,IAAvBX,EAAsB,EAAtBA,QAASN,EAAa,EAAbA,UAC7C,OACE,mCACE,eAACnD,EAAA,EAAD,WACE,cAACkE,EAAA,EAAD,UAAMT,EAAQY,QACd,eAACH,EAAA,EAAD,eAAOf,UCJf,I,EAOe,SAASmB,EAAT,GAAoD,IAA3BxC,EAA0B,EAA1BA,KAAMyB,EAAoB,EAApBA,QAASZ,EAAW,EAAXA,QAC/C4B,EAAc,SAACd,EAASN,EAAWC,GACvCG,EAAQ,EAAGE,EAAQY,MAAOZ,EAAQP,GAAIC,EAAWC,IAE7CQ,EAAY,SAAC9B,GACbA,EAAK0C,YAAYC,SACnB9B,KAGJ,OACE,6BACGb,EAAKe,OAAO6B,KAAI,SAACC,EAAMC,GACtB,GAAyB,MAArBD,EAAKE,OAAO,GAAG3B,GACjB,OAAOyB,EAAKE,OAAOH,KAAI,SAACI,EAAWC,GACjC,OACE,6BACE,cAACvB,EAAD,CACEC,QAASqB,EACTpB,eAzBE,iFA0BFC,MAAOS,EACPjB,UAAWwB,EAAKtE,KAChB+C,QAASuB,EAAKzB,GACdK,QAASgB,EACTX,UAAWA,KARF,GAAJgB,EAASG,WCtBhC,IAAMC,EAAelB,YAAH,2HAQH,SAASmB,EAAT,GAA8B,IAAZtC,EAAW,EAAXA,QAC/B,EAAmDoB,YAAYiB,GAA/D,mBAAOhB,EAAP,YAAyBlC,EAAzB,EAAyBA,KACzB,GADA,EAA+BmC,QAA/B,EAAwChC,MACb3B,mBAAS,KAApC,mBAAOD,EAAP,KAAa6E,EAAb,KAIA,OAHIpD,GACFa,IAGA,uBACEwC,SAAU,SAACC,GACTA,EAAEC,iBACFrB,EAAe,CAAEG,UAAW,CAAE9D,KAAMA,MAHxC,UAME,uBACEI,MAAOJ,EACPK,SAAU,SAACC,GACTuE,EAAWvE,EAAMC,OAAOH,QAE1BI,KAAK,SAEP,wBAAQA,KAAK,SAAb,yB,sBC1BAyE,EAAexB,YAAH,uJAQH,SAASyB,EAAT,GAA2C,IAMpDC,EANgC3C,EAAmB,EAAnBA,OAAQF,EAAW,EAAXA,QAC5C,EAAmDoB,YAAYuB,GAA/D,mBAAOtB,EAAP,YACA,GADA,EAAyBlC,KAAzB,EAA+BmC,QAA/B,EAAwChC,MACF3B,mBAAS,KAA/C,mBAAOmF,EAAP,KAAoBC,EAApB,KACA,EAA8BpF,mBAAS,IAAvC,mBAAOqF,EAAP,KAAgBT,EAAhB,KACMU,EAAQC,cAQd,OALc,MAAVhD,IACF2C,EAAmB3C,EAAO6B,KAAI,SAACC,EAAMC,GACnC,MAAO,CAAEnE,MAAOkE,EAAKzB,GAAI4C,MAAOnB,EAAKtE,UAIvC,mCACE,uBACE8E,SAAU,SAACC,GACTA,EAAEC,iBACFrB,EAAe,CACbG,UAAW,CAAE9D,KAAMsF,EAASI,MAAON,EAAYhF,SAE9CmB,MAAK,YAAc,EAAXE,KACPa,OAEDX,OAAM,SAACoD,GACNQ,EAAM3D,MAAM,sBAVpB,UAcE,uBACExB,MAAOkF,EACPjF,SAAU,SAACC,GACTuE,EAAWvE,EAAMC,OAAOH,QAE1BI,KAAK,SAEP,wBAAQA,KAAK,SAAb,uBACA,cAAC,IAAD,CACEmF,aAAcP,EACd/E,SAAUgF,EACVO,QAAST,SCpDJ,SAASU,EAAT,GAAmC,IAAZzC,EAAW,EAAXA,QACpC,OAAO,mCAAGA,EAAQpD,OCGpB,I,EAAMqD,EAAc,iFAOL,SAASyC,EAAT,GAAmD,IAA3BrE,EAA0B,EAA1BA,KAAMyB,EAAoB,EAApBA,QAASZ,EAAW,EAAXA,QAC9CiD,EAAQC,cAERtB,EAAc,SAACd,GACnBF,EAAQ,EAAGE,EAAQpD,KAAMoD,EAAQP,KAE7BU,EAAY,SAAC9B,GACbA,EAAKsE,YAAY3B,QACnB9B,IAEAiD,EAAMS,KAAK,wBAGf,OACE,6BACGvE,EAAKe,OAAO6B,KAAI,SAACC,EAAMC,GACtB,OAAyB,MAArBD,EAAKE,OAAO,GAAG3B,GAEf,+BACE,cAACM,EAAD,CACEC,QAASkB,EACTjB,eAAgBA,EAChBC,MAAOuC,EACP3B,YAAaA,EACbX,UAAWA,IAEb,6BACGe,EAAKE,OAAOH,KAAI,SAACI,EAAWC,GAC3B,OACE,6BACE,8BAAMD,EAAUT,SADTU,UAXRH,GAqBT,6BACE,cAACpB,EAAD,CACEC,QAASkB,EACTjB,eAAgBA,EAChBC,MAAOuC,EACP3B,YAAaA,EACbX,UAAWA,KANNgB,QC/CrB,I,EAAM0B,EAAaxC,YAAH,+IAQD,SAASyC,EAAT,GAAmD,IAA3B7D,EAA0B,EAA1BA,QAASI,EAAiB,EAAjBA,cAC9C,EAAmDiB,YAAYuC,GAA/D,mBAAOtC,EAAP,YAAyBlC,EAAzB,EAAyBA,KACzB,GADA,EAA+BmC,QAA/B,EAAwChC,MACV3B,mBAASoC,EAAQrC,OAA/C,mBAAOsF,EAAP,KAAgBT,EAAhB,KAOA,OANA9C,qBAAU,WACJN,GACFgB,OAKF,mCACE,uBACEqC,SAAU,SAACC,GACTA,EAAEC,iBACFrB,EAAe,CAAEG,UAAW,CAAE9D,KAAMsF,EAASzC,GAAIR,EAAQQ,OAH7D,UAME,uBACEzC,MAAOkF,EACPjF,SAAU,SAACC,GACTuE,EAAWvE,EAAMC,OAAOH,QAE1BI,KAAK,SAEP,wBAAQA,KAAK,SAAb,uBC/BR,I,EAAM2F,EAAa1C,YAAH,2KAQD,SAAS2C,EAAT,GAA2D,IAAnC/D,EAAkC,EAAlCA,QAASI,EAAyB,EAAzBA,cAAeD,EAAU,EAAVA,OAC7D,EAAmDkB,YAAYyC,GAA/D,mBAAOxC,EAAP,YAAyBlC,EAAzB,EAAyBA,KACzB,GADA,EAA+BmC,QAA/B,EAAwChC,MACV3B,mBAASoC,EAAQrC,OAA/C,mBAAOsF,EAAP,KAAgBT,EAAhB,KACA,EAAsC5E,mBAAS,CAC7CG,MAAOiC,EAAQU,QACf0C,MAAOpD,EAAQS,YAFjB,mBAAOsC,EAAP,KAAoBC,EAApB,KAKMF,EAAmB3C,EAAO6B,KAAI,SAACC,EAAMC,GACzC,MAAO,CAAEnE,MAAOkE,EAAKzB,GAAI4C,MAAOnB,EAAKtE,SAQvC,OANA+B,qBAAU,WACJN,GACFgB,OAKF,qCACE,uBACEqC,SAAU,SAACC,GACTA,EAAEC,iBACFrB,EAAe,CACbG,UAAW,CACT9D,KAAMsF,EACNI,MAAON,EAAYhF,MACnByC,GAAIR,EAAQQ,OAPpB,UAYE,uBACEzC,MAAOkF,EACPjF,SAAU,SAACC,GACTuE,EAAWvE,EAAMC,OAAOH,QAE1BI,KAAK,SAEP,wBAAQA,KAAK,SAAb,qBAEF,cAAC,IAAD,CACEmF,aAAcP,EACd/E,SAAUgF,EACVO,QAAST,OC7CjB,IAAMkB,EAAa5C,YAAH,6JAcD,SAAS6C,IACtB,MAAyDC,YACvDF,EACA,CACEG,YAAa,eACbC,6BAA6B,IAJzB7C,EAAR,EAAQA,QAAShC,EAAjB,EAAiBA,MAAOH,EAAxB,EAAwBA,KAAMa,EAA9B,EAA8BA,QAQ9B,OARA,EAAuCoE,gBAQjBC,IAAcrE,QAC3B,8CACEsB,EACF,2CACEhC,EACF,uCAGL,mCACE,eAAClC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACkE,EAAA,EAAD,UACE,cAACe,EAAD,CAAQtC,QAASA,MAEnB,cAACuB,EAAA,EAAD,UACE,cAACqB,EAAD,CAAa1C,OAAQf,EAAKe,OAAQF,QAASA,SAG/C,uBACgB,MAAfb,EAAKe,OACJ,eAAC7C,EAAA,EAAD,WACE,cAACkE,EAAA,EAAD,UACE,cAACnB,EAAD,CACEjB,KAAMA,EACNkB,KAAMmD,EACNxD,QAASA,EACTC,KAAM2D,MAGV,cAACrC,EAAA,EAAD,UACE,cAACnB,EAAD,CACEjB,KAAMA,EACNkB,KAAMsB,EACN3B,QAASA,EACTC,KAAM6D,SAIV,UCrEC,SAASQ,IACtB,OACE,qCACE,mLAKA,uBACA,cAACN,EAAD,O,aCmCSO,MAxCf,WAKE,OACE,qCACE,eAACC,EAAA,EAAD,CAAKC,QAAQ,QAAb,UACE,cAACD,EAAA,EAAIE,KAAL,UACE,cAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,SAASC,GAAIF,IAAMG,GAAG,IAAzC,oBAIF,cAACN,EAAA,EAAIE,KAAL,UACE,cAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,SAASC,GAAIF,IAAMG,GAAG,cAAzC,6BAIF,cAACN,EAAA,EAAIE,KAAL,UACE,cAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,SAASC,GAAIF,IAAMG,GAAG,cAAzC,sCAKJ,uBACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACvH,KAAK,IAAlB,SACE,cAACL,EAAD,MAEF,cAAC,IAAD,CAAOK,KAAK,cAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,cAAZ,SACE,cAAC8G,EAAD,aC3BKU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjG,MAAK,YAAkD,IAA/CkG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gDCGR3B,GAAU,CAEdkC,SAAUC,IAAUC,cACpBC,QAAS,IACTC,OAAQ,OAERC,WAAYC,IAAYC,OAGpBC,GAAS,IAAIC,KAAa,CAC9BC,IAAK,qEACLC,MAAO,IAAIC,OAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,GAAA,EAAD,CAAgBR,OAAQA,GAAxB,SACE,cAAC,IAAD,yBAAeS,SAAUC,MAAmBpD,IAA5C,aACE,cAAC,EAAD,aAKRqD,SAASC,eAAe,SAM1B5B,M","file":"static/js/main.9b0bbd4c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <h2 className=\"text-center\">\r\n          Ongoing project to show my web programming skills.\r\n        </h2>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <h2 className=\"text-center \">\r\n          Click links at the top of the page to see different small programs.\r\n        </h2>\r\n      </Row>\r\n      <br />\r\n      <h3>\r\n        Webpage repository https://github.com/simonas-misevicius/My-Webpage\r\n      </h3>\r\n      <h5>\r\n        Webpage hosted on github pages. Used single page routing. Other\r\n        libraries more explained in repository readme page.\r\n      </h5>\r\n      <br />\r\n      <h3>\r\n        Apollo server repository\r\n        https://github.com/simonas-misevicius/apollo-server\r\n      </h3>\r\n      <h5>\r\n        Project uses serverless database technologie. Database is in AWS. Apollo\r\n        server is responsible for executing webpage requests on database. Apollo\r\n        server also lives in AWS as Lambda function. Apollo server uses graphQL\r\n        language to construct queries and mutations. Also uses\r\n        schema-resolver-datasource model.\r\n      </h5>\r\n      <br />\r\n      <h3>https://github.com/simonas-misevicius/WebServicePicture</h3>\r\n      <h5>\r\n        Made with .Net. Hosted on Azure. Uses model-controller model. Uses\r\n        inmemory database.\r\n      </h5>\r\n      <br />\r\n    </Container>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function WSInput({ path, request, name }) {\r\n  const [num, changeNum] = useState(0);\r\n  const makeRequest = () => {\r\n    if (num != \"\" || typeof num == \"number\") {\r\n      request(num, name);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <input\r\n        value={num}\r\n        onChange={(event) => {\r\n          changeNum(event.target.value);\r\n        }}\r\n        type=\"number\"\r\n      />\r\n      <button onClick={makeRequest}>{name}</button>\r\n    </>\r\n  );\r\n}\r\n","import WSInput from \"./ImageWebServiceInput\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport { usePromiseTracker, trackPromise } from \"react-promise-tracker\";\r\nimport { ClipLoader } from \"react-spinners\";\r\n\r\nexport default function ImageWS() {\r\n  const [imageData, setImageData] = useState();\r\n  const { promiseInProgress } = usePromiseTracker();\r\n  const axios = require(\"axios\");\r\n  const request = (amount, func) => {\r\n    var str = \"https://simonasrest.azurewebsites.net/api/Images/1/\";\r\n    if (amount == null) {\r\n      str = str + func;\r\n    } else {\r\n      str = str + func + \"/\" + amount.toString();\r\n    }\r\n    trackPromise(\r\n      axios\r\n        .get(str)\r\n        .then(function (response) {\r\n          //console.log(response.data);\r\n          setImageData(response.data.imageBytes);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        })\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    request(null, \"Reset\");\r\n  }, []);\r\n  const imageSrc = \"data:image/jpg;base64,\" + imageData;\r\n  return (\r\n    <Container>\r\n      <h1 className=\"text-center\">\r\n        Small example of consuming web api, which exposes image processing\r\n        functions.\r\n      </h1>\r\n      {imageData == null ? null : <img src={imageSrc} alt=\"Example\"></img>}\r\n      {promiseInProgress === true ? <ClipLoader /> : null}\r\n      <br />\r\n      <WSInput request={request} name=\"Brightness\" />\r\n      <br />\r\n      <WSInput request={request} name=\"Hue\" />\r\n      <br />\r\n      <button onClick={() => request(null, \"Reset\")}>Reset</button>\r\n    </Container>\r\n  );\r\n}\r\n","export default function SDBEdit({\r\n  ReturnToList,\r\n  rowInfo,\r\n  refetch,\r\n  Edit,\r\n  uppers,\r\n}) {\r\n  const cancelEdit = () => {\r\n    ReturnToList(0, null, null);\r\n  };\r\n  const handlesuccess = () => {\r\n    refetch();\r\n    ReturnToList(0, null, null);\r\n  };\r\n  return (\r\n    <>\r\n      <Edit rowInfo={rowInfo} handlesuccess={handlesuccess} uppers={uppers} />\r\n      <button onClick={cancelEdit}>Cancel</button>\r\n    </>\r\n  );\r\n}\r\n","import SDBEdit from \"./SDBEdit\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function SDBList({ data, List, refetch, Edit }) {\r\n  const [rowInfo, setRowInfo] = useState({\r\n    showEdit: 0,\r\n    name: null,\r\n    id: null,\r\n    upperName: null,\r\n    upperId: null,\r\n  });\r\n  const SwitchBetweenListAndEdit = (\r\n    showEdit,\r\n    name,\r\n    id,\r\n    upperName = null,\r\n    upperId = null\r\n  ) => {\r\n    setRowInfo({\r\n      showEdit: showEdit,\r\n      name: name,\r\n      id: id,\r\n      upperName: upperName,\r\n      upperId: upperId,\r\n    });\r\n  };\r\n  if (rowInfo.showEdit == 1) {\r\n    return (\r\n      <SDBEdit\r\n        ReturnToList={SwitchBetweenListAndEdit}\r\n        rowInfo={rowInfo}\r\n        refetch={refetch}\r\n        Edit={Edit}\r\n        uppers={data.uppers}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <List data={data} EditRow={SwitchBetweenListAndEdit} refetch={refetch} />\r\n  );\r\n}\r\n","import { useMutation, gql } from \"@apollo/client\";\r\nimport { useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function SDBRow({\r\n  rowData,\r\n  mutationString,\r\n  MyRow,\r\n  upperName,\r\n  upperId,\r\n  EditRow,\r\n  checkData,\r\n}) {\r\n  const DELETE = gql(mutationString);\r\n  const [mutateFunction, { data, loading, error }] = useMutation(DELETE);\r\n\r\n  const removeItem = () => {\r\n    mutateFunction({ variables: { id: rowData.id } });\r\n  };\r\n  const passEditRow = () => {\r\n    EditRow(rowData, upperName, upperId);\r\n  };\r\n  useEffect(() => {\r\n    if (data) {\r\n      checkData(data);\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col>\r\n          <MyRow rowData={rowData} upperName={upperName} />\r\n        </Col>\r\n        <Col>\r\n          <button onClick={removeItem}>Remove item</button>\r\n        </Col>\r\n        <Col>\r\n          <button onClick={passEditRow}>Edit item</button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","import { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nexport default function SDBRowLower({ rowData, upperName }) {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>{rowData.namel}</Col>\r\n        <Col> {upperName}</Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import SDBRow from \"./SDBRow\";\r\nimport SDBRowLower from \"./SDBRowLower\";\r\n\r\nconst mutationString = `\r\nmutation Mutation($id: ID!) {\r\n  removeLower(id: $id) {\r\n    success\r\n  }\r\n}`;\r\n\r\nexport default function SDBListLowers({ data, EditRow, refetch }) {\r\n  const callEditRow = (rowData, upperName, upperId) => {\r\n    EditRow(1, rowData.namel, rowData.id, upperName, upperId);\r\n  };\r\n  const checkData = (data) => {\r\n    if (data.removeLower.success) {\r\n      refetch();\r\n    }\r\n  };\r\n  return (\r\n    <ul>\r\n      {data.uppers.map((item, i) => {\r\n        if (item.lowers[0].id != null) {\r\n          return item.lowers.map((lowerItem, loi) => {\r\n            return (\r\n              <li key={i * 10 + loi}>\r\n                <SDBRow\r\n                  rowData={lowerItem}\r\n                  mutationString={mutationString}\r\n                  MyRow={SDBRowLower}\r\n                  upperName={item.name}\r\n                  upperId={item.id}\r\n                  EditRow={callEditRow}\r\n                  checkData={checkData}\r\n                />\r\n              </li>\r\n            );\r\n          });\r\n        }\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n","import { useMutation, gql } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\n\r\nconst INSERT_UPPER = gql`\r\n  mutation Mutation($name: String!) {\r\n    addUpper(name: $name) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function SDBAdd({ refetch }) {\r\n  const [mutateFunction, { data, loading, error }] = useMutation(INSERT_UPPER);\r\n  const [name, changename] = useState(\"\");\r\n  if (data) {\r\n    refetch();\r\n  }\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        mutateFunction({ variables: { name: name } });\r\n      }}\r\n    >\r\n      <input\r\n        value={name}\r\n        onChange={(event) => {\r\n          changename(event.target.value);\r\n        }}\r\n        type=\"text\"\r\n      />\r\n      <button type=\"submit\">Add item</button>\r\n    </form>\r\n  );\r\n}\r\n","import { useMutation, gql } from \"@apollo/client\";\r\nimport { useState } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { useAlert } from \"react-alert\";\r\n\r\nconst INSERT_LOWER = gql`\r\n  mutation Mutation($name: String!, $keyId: ID!) {\r\n    addLower(name: $name, keyId: $keyId) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function SDBAddLower({ uppers, refetch }) {\r\n  const [mutateFunction, { data, loading, error }] = useMutation(INSERT_LOWER);\r\n  const [selectionId, setSelectionId] = useState(\"\");\r\n  const [newName, changename] = useState(\"\");\r\n  const alert = useAlert();\r\n\r\n  let selectionOptions;\r\n  if (uppers != null) {\r\n    selectionOptions = uppers.map((item, i) => {\r\n      return { value: item.id, label: item.name };\r\n    });\r\n  }\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          mutateFunction({\r\n            variables: { name: newName, keyId: selectionId.value },\r\n          })\r\n            .then(({ data }) => {\r\n              refetch();\r\n            })\r\n            .catch((e) => {\r\n              alert.error(\"Missing input!\");\r\n            });\r\n        }}\r\n      >\r\n        <input\r\n          value={newName}\r\n          onChange={(event) => {\r\n            changename(event.target.value);\r\n          }}\r\n          type=\"text\"\r\n        />\r\n        <button type=\"submit\">Add lower</button>\r\n        <Select\r\n          defaultValue={selectionId}\r\n          onChange={setSelectionId}\r\n          options={selectionOptions}\r\n        />\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","export default function SDBRowUpper({ rowData }) {\r\n  return <>{rowData.name}</>;\r\n}\r\n","import SDBRow from \"./SDBRow\";\r\nimport SDBRowUpper from \"./SDBRowUpper\";\r\nimport { useAlert } from \"react-alert\";\r\n\r\nconst mutationString = `\r\nmutation Mutation($id: ID!) {\r\n  removeUpper(id: $id) {\r\n    success\r\n  }\r\n}`;\r\n\r\nexport default function SDBListUpper({ data, EditRow, refetch }) {\r\n  const alert = useAlert();\r\n\r\n  const callEditRow = (rowData) => {\r\n    EditRow(1, rowData.name, rowData.id);\r\n  };\r\n  const checkData = (data) => {\r\n    if (data.removeUpper.success) {\r\n      refetch();\r\n    } else {\r\n      alert.show(\"Remove lowers first\");\r\n    }\r\n  };\r\n  return (\r\n    <ul>\r\n      {data.uppers.map((item, i) => {\r\n        if (item.lowers[0].id != null) {\r\n          return (\r\n            <li key={i}>\r\n              <SDBRow\r\n                rowData={item}\r\n                mutationString={mutationString}\r\n                MyRow={SDBRowUpper}\r\n                callEditRow={callEditRow}\r\n                checkData={checkData}\r\n              />\r\n              <ul>\r\n                {item.lowers.map((lowerItem, loi) => {\r\n                  return (\r\n                    <li key={loi}>\r\n                      <div>{lowerItem.namel}</div>\r\n                    </li>\r\n                  );\r\n                })}\r\n              </ul>\r\n            </li>\r\n          );\r\n        } else {\r\n          return (\r\n            <li key={i}>\r\n              <SDBRow\r\n                rowData={item}\r\n                mutationString={mutationString}\r\n                MyRow={SDBRowUpper}\r\n                callEditRow={callEditRow}\r\n                checkData={checkData}\r\n              />\r\n            </li>\r\n          );\r\n        }\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n","import { useMutation, gql } from \"@apollo/client\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst EDIT_UPPER = gql`\r\n  mutation Mutation($name: String!, $id: ID!) {\r\n    editUpper(name: $name, id: $id) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function SDBEditUpper({ rowInfo, handlesuccess }) {\r\n  const [mutateFunction, { data, loading, error }] = useMutation(EDIT_UPPER);\r\n  const [newName, changename] = useState(rowInfo.name);\r\n  useEffect(() => {\r\n    if (data) {\r\n      handlesuccess();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          mutateFunction({ variables: { name: newName, id: rowInfo.id } });\r\n        }}\r\n      >\r\n        <input\r\n          value={newName}\r\n          onChange={(event) => {\r\n            changename(event.target.value);\r\n          }}\r\n          type=\"text\"\r\n        />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","import { useMutation, gql } from \"@apollo/client\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst EDIT_LOWER = gql`\r\n  mutation Mutation($name: String!, $keyId: ID!, $id: ID!) {\r\n    editLower(name: $name, keyId: $keyId, id: $id) {\r\n      success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function SDBEditLower({ rowInfo, handlesuccess, uppers }) {\r\n  const [mutateFunction, { data, loading, error }] = useMutation(EDIT_LOWER);\r\n  const [newName, changename] = useState(rowInfo.name);\r\n  const [selectionId, setSelectionId] = useState({\r\n    value: rowInfo.upperId,\r\n    label: rowInfo.upperName,\r\n  });\r\n\r\n  const selectionOptions = uppers.map((item, i) => {\r\n    return { value: item.id, label: item.name };\r\n  });\r\n  useEffect(() => {\r\n    if (data) {\r\n      handlesuccess();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          mutateFunction({\r\n            variables: {\r\n              name: newName,\r\n              keyId: selectionId.value,\r\n              id: rowInfo.id,\r\n            },\r\n          });\r\n        }}\r\n      >\r\n        <input\r\n          value={newName}\r\n          onChange={(event) => {\r\n            changename(event.target.value);\r\n          }}\r\n          type=\"text\"\r\n        />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n      <Select\r\n        defaultValue={selectionId}\r\n        onChange={setSelectionId}\r\n        options={selectionOptions}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","import { useQuery, gql, NetworkStatus } from \"@apollo/client\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport SDBList from \"./SDBList\";\r\nimport SDBListLowers from \"./SDBListLowers\";\r\nimport SDBAdd from \"./SDBAdd\";\r\nimport SDBAddLower from \"./SDBAddLower\";\r\nimport SDBListUpper from \"./SDBListUpper\";\r\nimport SDBEditUpper from \"./SDBEditUpper\";\r\nimport SDBEditLower from \"./SDBEditLower\";\r\n\r\nconst GET_UPPERS = gql`\r\n  query {\r\n    uppers {\r\n      name\r\n      id\r\n      lowers {\r\n        namel\r\n        id\r\n        upperkey\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function ServerlessDB() {\r\n  const { loading, error, data, refetch, networkStatus } = useQuery(\r\n    GET_UPPERS,\r\n    {\r\n      fetchPolicy: \"network-only\",\r\n      notifyOnNetworkStatusChange: true,\r\n    }\r\n  );\r\n\r\n  if (networkStatus === NetworkStatus.refetch) {\r\n    return <p>Refetching...</p>;\r\n  } else if (loading) {\r\n    return <p>Loading...</p>;\r\n  } else if (error) {\r\n    return <p>Error </p>;\r\n  } else {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <SDBAdd refetch={refetch} />\r\n            </Col>\r\n            <Col>\r\n              <SDBAddLower uppers={data.uppers} refetch={refetch} />\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          {data.uppers != null ? (\r\n            <Row>\r\n              <Col>\r\n                <SDBList\r\n                  data={data}\r\n                  List={SDBListUpper}\r\n                  refetch={refetch}\r\n                  Edit={SDBEditUpper}\r\n                />\r\n              </Col>\r\n              <Col>\r\n                <SDBList\r\n                  data={data}\r\n                  List={SDBListLowers}\r\n                  refetch={refetch}\r\n                  Edit={SDBEditLower}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          ) : null}\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import ServerlessDB from \"./ServerlessDB\";\r\n\r\nexport default function SDBHome() {\r\n  return (\r\n    <>\r\n      <h5>\r\n        Funcionality for using two tables connected with foreign key. Foreign\r\n        key field selection made with dropdown list. Made with reusable\r\n        components.\r\n      </h5>\r\n      <br />\r\n      <ServerlessDB />\r\n    </>\r\n  );\r\n}\r\n","import { Route, Switch, Link } from \"react-router-dom\";\r\nimport Home from \"./Home\";\r\nimport ImageWebService from \"./ImageWebService\";\r\nimport SDBHome from \"./SDBHome\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  const dataForList = [\r\n    { name: \"abc\", number: 123 },\r\n    { name: \"def\", number: 235 },\r\n  ];\r\n  return (\r\n    <>\r\n      <Nav variant=\"pills\">\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-1\" as={Link} to=\"/\">\r\n            Home\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-4\" as={Link} to=\"/serverless\">\r\n            Serverless DB\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link eventKey=\"link-3\" as={Link} to=\"/webservice\">\r\n            Consume Web Service\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n      <br />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/webservice\">\r\n          <ImageWebService />\r\n        </Route>\r\n        <Route path=\"/serverless\">\r\n          <SDBHome />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\nimport MyList from \"./MyList\";\r\n\r\n<Nav.Item>\r\n          <Nav.Link eventKey=\"link-2\" as={Link} to=\"/mylist\">\r\n            List example\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n\r\n<Route path=\"/mylist\">\r\n          <MyList data={dataForList} />\r\n        </Route>\r\n*/\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\r\nimport { transitions, positions, Provider as AlertProvider } from \"react-alert\";\r\nimport AlertTemplate from \"react-alert-template-basic\";\r\n\r\nconst options = {\r\n  // you can also just use 'bottom center'\r\n  position: positions.BOTTOM_CENTER,\r\n  timeout: 5000,\r\n  offset: \"30px\",\r\n  // you can also just use 'scale'\r\n  transition: transitions.SCALE,\r\n};\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"https://0jl96uttif.execute-api.us-east-1.amazonaws.com/dev/graphql\",\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <HashRouter>\r\n      <ApolloProvider client={client}>\r\n        <AlertProvider template={AlertTemplate} {...options}>\r\n          <App />\r\n        </AlertProvider>\r\n      </ApolloProvider>\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}